Topic: Class,Object Creation,Constructor,Destructor

========
Python: 
========

class A:
    def __init__(self) -> None: #constructor
        print("I am Constructor")
    def display(self): #method
        print("Hello")
    def __del__(self): #destructor
        print("I am Destructor")
#Destructors are called when an object gets destroyed. In Python, destructors are not needed as much as in C++ because Python has a garbage collector that handles memory management automatically. 
#The __del__() method is a known as a destructor method in Python. It is called when all references to the object have been deleted i.e when an object is garbage collected. 

obj = A() #object of class A
obj.display() #method call

========
C++: 
========
#include <bits/stdc++.h>
using namespace std;

class A
{
public:
    //Constructor
    A()
    {
        cout << "I am Constructor\n";
    }

    //method
    void display()
    {
        cout << "Hello\n";
    }

    //destructor
    ~A()
    {
        cout << "I am Destructor\n";
    }
};

int main()
{
    A obj;  //Object of Class A
    obj.display(); //Method Call

    return 0;
}



